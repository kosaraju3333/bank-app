name: Java app DevSecOps Ci/CD Pipeline

on: 
  push:
    branches:
      - "master"

jobs:
  portal-app-CI-CD:
    name: Java app DevSecOps Ci/CD Pipeline
    runs-on: ubuntu-latest

    ### GIT code Checkout 
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

    ### Installing Java JDK17 (Required for SonarQube)
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

    ############################ Pre Build Phase ###################################
    ### Run Trivy FS Scan
      - name: Run Trivy FS Scan (Repository Dependencies)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'table'
          exit-code: 0
          severity: 'CRITICAL,HIGH' 

    ### Compile with maven
      - name: Maven Compile
        run: mvn compile

    ### SonarQube Scane for code analysis
      - name: Code analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npx sonarqube-scanner \
          -Dsonar.projectKey=bank-app \
          -Dsonar.sources=src/main/java \
          -Dsonar.java.binaries=target/classes \
          -Dsonar.host.url=https://sonarqube.spontansolutions.com/ \
          -Dsonar.login=$SONAR_TOKEN
    
    ### Wait for SonarQube Analysis
      - name: Wait for SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          STATUS="PENDING"
          while [ "$STATUS" == "PENDING" ]; do
            sleep 20
            RESPONSE=$(curl -s -u $SONAR_TOKEN: "https://sonarqube.spontansolutions.com/api/qualitygates/project_status?projectKey=bank-app")
            STATUS=$(echo "$RESPONSE" | jq -r '.projectStatus.status' || echo "PENDING")
            echo "Waiting for SonarQube Analysis... Current Status: $STATUS"
          done

    ### SonarQube Quality Gates
      - name: Check SonarQube Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          STATUS=$(curl -s -u $SONAR_TOKEN: "https://sonarqube.spontansolutions.com/api/qualitygates/project_status?projectKey=bank-app" | jq -r .projectStatus.status)
          echo $STATUS
          if [ "$STATUS" != "OK" ]; then
            echo "‚ùå ‚ùå Quality Gate Failed. Stoping deployment!! ‚ùå ‚ùå "
            exit 1
          fi

    #################################### Build Phase ########################################

    # ### Compile with maven
    #   - name: Maven Compile
    #     run: mvn compile

    ### Run Tests
      - name: Run Tests
        run: mvn test -DskipTests=true

    ### Packaging the app
      - name: App package
        run: mvn package -DskipTests=true

    ### Set Date Variable 
      - name: Set Date Variable
        run: echo "DATE=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV

    ### Uploading jar to Nexus
      - name: Upload to Nexus
        run: |
          curl -u ${{ secrets.NEXUS_USER }}:${{ secrets.NEXUS_PASS }} \
          --upload-file target/*.jar \
          https://nexus.spontansolutions.com/repository/bank-app-artifacts/bank-app-$DATE.jar
      

    ### Build Docker Image
      - name: Build Bank-app Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          dockerfile: Dockerfile
          push: false
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bank-app:${{ env.DATE }}

      - name: Scan local Docker image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/bank-app:${{ env.DATE }}
          format: 'table'
          ignore-unfixed: true
          exit-code: 0
          severity: 'CRITICAL,HIGH'

    ### Docker Login
      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

    ### Push to Docker Hub
      - name: Push Bank-app to Docker Hub
        uses: docker/build-push-action@v6
        with:
          context: .
          dockerfile: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bank-app:${{ env.DATE }}

    ############################## CD ###############################################

      - name: Clone GitOps Repo
        run: |
          git clone https://x-access-token:${{ secrets.GIT_TOKEN }}@${{ secrets.GIT_OPS_REPO }}
          # cd git-ops-ArgoCD
          # ls -R

      - name: Update Deployment YAML
        run: |
          cd git-ops-ArgoCD/bank-app/app
          sed -i "s|\(image: .*\):.*|\1:${{ env.DATE }}|" deployment.yml

      - name: Commit and Push to GitOps Repo
        run: |
          git config user.name "${{ secrets.GIT_USERNAME }}"
          git config user.email "${{ secrets.GIT_EMAIL }}"
          git add .
          git commit -m "Update image to ${{ env.DATE }}"
          git push origin master
        working-directory: git-ops-ArgoCD


  ############################## Notifications #######################################
    ### üö® Send Slack Alert on Failure
      - name: Send Slack Alert on Failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "attachments": [
              {
                "color": "#FF0000",
                "title": "üö® CI/CD Pipeline Failed!",
                "text": "‚ùå Repository: ${{ github.repository }}\nBranch: ${{ github.ref }}\nCheck logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              }
            ]
          }' ${{ secrets.SLACK_WEBHOOK_URL }}

    ### ‚úÖ Send Slack Alert on Success
      - name: Send Slack Alert on Success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "attachments": [
              {
                "color": "#36A64F",
                "title": "‚úÖ CI/CD Pipeline Succeeded!",
                "text": "üéâ Repository: ${{ github.repository }}\nBranch: ${{ github.ref }}\nCheck logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              }
            ]
          }' ${{ secrets.SLACK_WEBHOOK_URL }}